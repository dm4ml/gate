{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>GATE is a Python module that detects drift in partitions of data. GATE computes partition summaries, which are then fed into an anomaly detection algorithm to detect whether a new partition is anomalous. This minimizes false positive alerts when detecting drift in machine learning (ML) pipelines, where there may be many features and prediction columns.</p>"},{"location":"#installation","title":"Installation","text":"<p>GATE is available on PyPI and can be installed with pip:</p> <pre><code>pip install gate-drift\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>GATE is designed to be used with Pandas dataframes. Check out the example for a walkthrough of how to use GATE.</p>"},{"location":"#research-contributions","title":"Research Contributions","text":"<p>GATE was developed and is maintained by researchers at the UC Berkeley EPIC Lab.</p> <p>An initial version of GATE was developed as part of a collaboration with Meta, and the research paper, \"Moving Fast With Broken Data\" by Shankar et al., is available on arXiv. This module slightly differs from the original implementation, but the core ideas around partition summaries and anomaly detection are the same.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#gate.summarize.summarize","title":"<code>summarize(df, columns=[], partition_key='', previous_summaries=[])</code>","text":"<p>This function computes partition-wide summary statistics for the given columns. df can have multiple partitions.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pd.DataFrame</code> <p>Dataframe to summarize.</p> required <code>columns</code> <code>typing.List[str]</code> <p>List of columns to generate summary statistics for. Must be a subset of df.columns. If empty, previous_summaries must not be empty.</p> <code>[]</code> <code>partition_key</code> <code>str</code> <p>Name of column to partition the dataframe by. Must be in df. columns. Can be empty if no partitioning is desired, or if the dataframe represents a single partition. If empty, previous_summaries must not be empty.</p> <code>''</code> <code>previous_summaries</code> <code>typing.List[Summary]</code> <p>List of Summary objects representing previous partition summaries.</p> <code>[]</code> <p>Returns:</p> Type Description <code>typing.List[Summary]</code> <p>typing.List[Summary]: List of Summary objects, one per distinct partition found in df.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>partition_key</code> is \"group\".</p> <code>ValueError</code> <p>If <code>columns is empty</code> and <code>previous_summaries</code> is empty.</p> <code>ValueError</code> <p>If <code>partition_key</code>is empty and <code>previous_summaries</code> is empty.</p> <code>ValueError</code> <p>If <code>partition_key</code> is not in <code>df.columns</code>.</p> <code>ValueError</code> <p>If any column in <code>columns</code> is not in <code>df.columns</code>.</p>"},{"location":"api/#gate.summary.Summary","title":"<code>Summary</code>","text":""},{"location":"api/#gate.summary.Summary.value","title":"<code>value: pd.DataFrame</code>  <code>property</code>","text":"<p>Dataframe containing the summary statistics.</p>"},{"location":"api/#gate.summary.Summary.partition_key","title":"<code>partition_key: str</code>  <code>property</code>","text":"<p>Partition key column.</p>"},{"location":"api/#gate.summary.Summary.partition","title":"<code>partition: str</code>  <code>property</code>","text":"<p>Partition key value.</p>"},{"location":"api/#gate.summary.Summary.columns","title":"<code>columns: typing.List[str]</code>  <code>property</code>","text":"<p>Columns for which summary statistics were computed.</p>"},{"location":"api/#gate.summary.Summary.statistics","title":"<code>statistics()</code>  <code>staticmethod</code>","text":"<p>Returns list of statistics computed for each column:</p> <ul> <li>coverage: Fraction of rows that are not null.</li> <li>mean: Mean of the column.</li> <li>stdev: Standard deviation of the column.</li> <li>num_unique_values: Number of unique values in the column.</li> <li>occurrence_ratio: Ratio of the most common value to all other values.</li> <li>num_frequent_values: Number of values that occur more than once.</li> </ul>"},{"location":"api/#gate.summary.Summary.__str__","title":"<code>__str__()</code>","text":"<p>String representation of the object's value (i.e., summary).</p> <p>Usage: <code>print(summary)</code></p>"},{"location":"api/#gate.drift.detect_drift","title":"<code>detect_drift(current_summary, previous_summaries, validity=[], cluster=True, k=5)</code>","text":"<p>Computes whether the current partition summary has drifted from previous summaries.</p> <p>Parameters:</p> Name Type Description Default <code>current_summary</code> <code>Summary</code> <p>Partition summary for current partition.</p> required <code>previous_summaries</code> <code>typing.List[Summary]</code> <p>Previous partition summaries.</p> required <code>validity</code> <code>typing.List[int]</code> <p>Indicator list identifying which partition summaries are valid. 1 if valid, 0 if invalid. If empty, we assume all partition summaries are valid. Must be empty or equal to length of previous_summaries.</p> <code>[]</code> <code>cluster</code> <code>bool</code> <p>Whether or not to cluster columns in summaries. Increases runtime but also increases precision in drift detection. Only engaged if summaries have more than 10 columns. Defaults to True.</p> <code>True</code> <code>k</code> <code>int</code> <p>Number of nearest neighbor partitions to inspect. Defaults to 5.</p> <code>5</code> <p>Returns (DriftResult): DriftResult object with score and score percentile.</p>"},{"location":"api/#gate.drift.DriftResult","title":"<code>DriftResult</code>","text":""},{"location":"api/#gate.drift.DriftResult.is_drifted","title":"<code>is_drifted: bool</code>  <code>property</code>","text":"<p>Indicates whether the partition is drifted or not, compared to previous partitions. This is determined by the percentile of the partition's score in the distribution of all scores. The threshold is 90%.</p>"},{"location":"api/#gate.drift.DriftResult.score","title":"<code>score: float</code>  <code>property</code>","text":"<p>Distance from the partition to its k nearest neighbors.</p>"},{"location":"api/#gate.drift.DriftResult.score_percentile","title":"<code>score_percentile: float</code>  <code>property</code>","text":"<p>Percentile of the partition's score in the distribution of all scores.</p>"},{"location":"api/#gate.drift.DriftResult.all_scores","title":"<code>all_scores: pd.Series</code>  <code>property</code>","text":"<p>Scores of all previous partitions.</p>"},{"location":"api/#gate.drift.DriftResult.clustering","title":"<code>clustering: typing.Dict[int, typing.List[str]]</code>  <code>property</code>","text":"<p>Clustering of the columns based on their partition summaries and meaning of column names (determined via embeddings). Returns a dictionary with cluster numbers as keys and lists of columns as values.</p>"},{"location":"api/#gate.drift.DriftResult.drill_down","title":"<code>drill_down()</code>","text":"<p>Compute the columns with highest magnitude anomaly scores. Anomaly scores are computed as the z-score of the column with respect to previous partition summary statistics.</p> <p>The resulting dataframe has the following schema (column, statistic are indexes):</p> <ul> <li>column: Name of the column</li> <li>statistic: Name of the statistic</li> <li>z-score: z-score of the column</li> <li>cluster: Cluster number of the column (if clustering was performed)</li> <li>z-score-cluster: z-score of the column in the cluster (if clustering was performed)</li> </ul> <p>Use the <code>drifted_columns</code> method first, since <code>drifted_columns</code> deduplicates columns.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>pd.DataFrame: Dataframe with columns with highest magnitude anomaly scores. Sorted by the magnitude of the z-score for a column. If clustering was performed, the dataframe will be sorted by the magnitude of the z-score in the cluster before the column score.</p>"},{"location":"api/#gate.drift.DriftResult.drifted_columns","title":"<code>drifted_columns(limit=10)</code>","text":"<p>Returns the top limit columns that have drifted. The resulting dataframe has the following schema (column is an index):</p> <ul> <li>column: Name of the column</li> <li>statistic: Name of the statistic</li> <li>z-score: z-score of the column</li> <li>cluster: Cluster number of the column (if clustering was performed)</li> <li>z-score-cluster: z-score of the column in the cluster (if clustering was performed)</li> </ul> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>Limit for number of drifted columns to return. Defaults to 10.</p> <code>10</code> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>pd.DataFrame: Dataframe with columns with highest magnitude z-scores. If clustering was performed, the dataframe will also contain the z-score in the cluster and the cluster number. Each column is deduplicated, so only the statistic with the highest magnitude z-score is returned.</p>"},{"location":"api/#gate.drift.DriftResult.__str__","title":"<code>__str__()</code>","text":"<p>Prints the drift score, percentile, and the top drifted columns.</p>"},{"location":"api/#gate.statistics.type_to_statistics","title":"<code>type_to_statistics(t)</code>","text":"<p>Returns the statistics that are computed for a given type.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>str</code> <p>Type (one of \"int\", \"float\", \"string\").</p> required <p>Returns:</p> Type Description <code>typing.List[str]</code> <p>typing.List[str]: List of statistics that are computed for the type. Partition summaries will have NaNs for statistics that are not computed.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the type is unknown.</p>"},{"location":"example/","title":"Example","text":"<p>There are two functions exposed by the GATE module: <code>summarize</code> and <code>detect_drift</code>. <code>summarize</code> computes partition summaries for a dataframe, and <code>detect_drift</code> detects whether a new partition is drifted. </p> <p>In this example, we'll demonstrate how to use GATE to detect drift in small synthetic dataset. </p>"},{"location":"example/#dataset-creation","title":"Dataset Creation","text":"<p>Our synthetic dataset will be created in Pandas. The partition key will be <code>date</code>. There will be 10 partitions, and each partition will have 10,000 rows. There will be 3 columns. The last partition will have a different column distribution than the first 9 partitions.</p> <pre><code>import numpy as np\nimport pandas as pd\n\n# create example date range\ndate_range = pd.date_range(start=\"2022-01-01\", periods=10, freq=\"D\")\n\n# create example data for each column\nint_col = np.random.randint(low=0, high=10, size=10000)\nfloat_col = np.random.normal(loc=0, scale=1, size=10000)\nstring_col = np.random.choice([\"A\", \"B\", \"C\"], size=10000)\n\n# combine data into a DataFrame\ndf_elems = []\nfor date in date_range:\n    date_data = {\"date\": date}\n    if date != date_range[-1]:\n        date_data = pd.DataFrame(\n            {\n                \"date\": [date] * len(int_col),\n                \"int_col\": int_col,\n                \"float_col\": float_col,\n                \"string_col\": string_col,\n            }\n        )\n    else:\n        # Change the distribution of the int column\n        date_data = pd.DataFrame(\n            {\n                \"date\": [date] * len(int_col),\n                \"int_col\": np.random.randint(low=10, high=20, size=10000),\n                \"float_col\": float_col,\n                \"string_col\": string_col\n            }\n        )\n    df_elems.append(date_data)\n\ndf = pd.concat(df_elems).reset_index(drop=True)\n</code></pre>"},{"location":"example/#summarize","title":"<code>summarize</code>","text":"<p>The <code>summarize</code> function computes partition summaries for a dataframe. In addition to a Pandas dataframe of raw data, it accepts the partition key and a list of columns in the dataframe to compute statistics for. Or, one can specify a list of previous partition summaries instead of the partition key and column list, and GATE will infer the partition key and columns from the previous partition summaries.</p> <p>The <code>summarize</code> function returns a list of <code>Summary</code> objects. Each <code>Summary</code> object contains the partition summary and other metadata, and has a <code>__str__</code> method that prints the summary in a human-readable format.</p> <pre><code>from gate import summarize\n\nsummaries = summarize(\n    df, partition_key=\"date\", columns=[\"int_col\", \"float_col\", \"string_col\"]\n)\n# len(summaries) == 10 because there are 10 distinct partitions\n\nprint(summaries[-1])\n\n\"\"\"\nstatistic       date      column  coverage       mean  num_unique_values  occurrence_ratio        p95     stdev\n0         2022-01-10   float_col       1.0  -0.005204                NaN               NaN   1.622783  0.995632\n1         2022-01-10     int_col       1.0  14.504000               10.0            0.1051  19.000000  2.891716\n2         2022-01-10  string_col       1.0        NaN                3.0            0.3388        NaN       NaN \n\"\"\"\n</code></pre> <p>Note</p> <p>You can access the summary data as a Pandas dataframe with the <code>value</code> attribute of the <code>Summary</code> object (i.e., <code>summaries[-1].value</code>).</p>"},{"location":"example/#detect_drift","title":"<code>detect_drift</code>","text":"<p>The <code>detect_drift</code> function detects whether a new partition is drifted. It accepts a new partition summary and list of previous partition summaries and returns a <code>DriftResult</code> object. The <code>DriftResult</code> object has a <code>__str__</code> method that prints the drift result in a human-readable format.</p> <pre><code>from gate import detect_drift\n\ndrift_result = detect_drift(summaries[-1], summaries[:-1])\nprint(drift_result)\n\n\"\"\"\nDrift score: 6.3246 (100.00% percentile)\nTop drifted columns:\n           statistic   z-score\ncolumn                        \nint_col          p95  2.846050\nfloat_col        p95  0.000002\nstring_col  coverage  0.000000\n\"\"\"\n</code></pre> <p>The z-score represents the number of standard deviations away from the mean that the new partition is. In this case, the int col correctly has a high z-score. We recommend focusing on z-scores &gt; 2.5 or &lt; -2.5 when looking for drift.</p> <p>If you want to cluster correlated columns, you can pass <code>cluster = True</code> into <code>detect_drift</code>. The <code>DriftResult</code> object has a <code>clustering</code> attribute that contains the clusters.</p> <p>Note</p> <p>The list of previous partition summaries must have at least one element. Best results are achieved when there are at least 5 previous partition summaries.</p>"},{"location":"example/#real-dataset-example","title":"Real Dataset Example","text":"<p>For an end-to-end example on a real weather dataset, see the example notebook in the Github repository.</p>"},{"location":"how-it-works/","title":"How it Works","text":"<p>GATE is designed specifically for machine learning (ML) pipelines, where there may be many features and prediction columns. While other methods to detect drift may result in large numbers of false positives, GATE is designed to be more robust to this problem through the use of partition summaries.</p>"},{"location":"how-it-works/#partition-summarization","title":"Partition Summarization","text":"<p>GATE ingests raw data and computes a partition summary for each partition. A partition summary is a vector of statistical measures that captures the distribution of the data in the partition. Partitions are typically time-based; for example, one per day. The following statistics are computed for each column:</p> <ul> <li>coverage: The fraction of the column that has non-null values.</li> <li>mean: The mean of the column.</li> <li>stdev: The standard deviation of the column.</li> <li>num_unique_values: The number of unique values in the column.</li> <li>occurrence_ratio: The count of the most frequent value divided by the total count.</li> <li>p95: The 95th percentile of the column.</li> </ul> <p>Partition summaries are small, and can be computed quickly. They are also robust to outliers, which is important for ML pipelines where there may be many features and prediction columns.</p>"},{"location":"how-it-works/#drift-detection","title":"Drift Detection","text":"<p>The partition summaries are then fed into an anomaly detection algorithm to detect whether a new partition is anomalous.</p>"},{"location":"how-it-works/#clustering","title":"Clustering","text":"<p>Since many columns might be correlated, GATE first clusters the columns into groups. GATE considers both the semantic meaning of the column (e.g., \"age\" and \"income\") and the partition summaries.</p> <p>Clustering is automatically performed by the GATE algorithm. The user does not need to specify the number of clusters. Partition summaries are normalized via z-score before clustering, so that the clustering algorithm is not biased towards columns with larger values.</p> <p>Note</p> <p>Clustering is engaged if there are more than 10 columns. If there are fewer than 10 columns, no clustering is performed.</p>"},{"location":"how-it-works/#nearest-neighbor-algorithm","title":"Nearest Neighbor Algorithm","text":"<p>Normalized partition summaries are then fed into a nearest neighbor algorithm to detect whether a new partition is anomalous. The nearest neighbor algorithm is a variant of the k-nearest neighbors algorithm. The algorithm computes the distance between the new partition and the nearest neighbors in previous partition summaries. If the distance is large (i.e., in the 90th percentile of distances), the new partition is considered drifted.</p> <p>Note</p> <p>If clustering is engaged, column summaries are averaged within each cluster before computing distances. This essentially reduces the dimensionality of the partition summary.</p>"},{"location":"how-it-works/#drill-down","title":"Drill Down","text":"<p>If a partition is detected as drifted, GATE can be used to drill down into the partition to identify the specific columns that are drifted. The columns with the largest z-score values are returned.</p>"},{"location":"how-it-works/#differences-from-the-original-research-paper","title":"Differences from the original research paper","text":"<p>Differences from the original implementation include:</p> <ul> <li>Removal of the need to specify a window size to normalize statistics over.</li> <li>Removal of the Wasserstein-1 distance and num_frequent_values metrics, which are time-consuming to compute and not as useful as other metrics.</li> <li>Addition of the p95 metric.</li> <li>Embeddings of column names and types in the clustering algorithm (in addition to partition summaries).</li> </ul>"}]}